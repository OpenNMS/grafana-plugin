{"version":3,"file":"panels/flow-histogram/module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./panels/flow-histogram/FlowHistogramHelpers.ts","webpack:///./panels/flow-histogram/FlowHistogramConstants.ts","webpack:///./components/OnmsInlineField.tsx","webpack:///./components/SwitchBox.tsx","webpack:///./panels/flow-histogram/FlowHistogramOptions.tsx","webpack:///./panels/flow-histogram/module.ts","webpack:///./panels/flow-histogram/FlowHistogramControl.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__7781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2007__;","module.exports = __WEBPACK_EXTERNAL_MODULE__5959__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { CSSProperties } from 'react'\nimport { DataFrame, PanelData } from '@grafana/data'\nimport { FlowHistogramOptionsProps, FlowPanelDataProcessed, FlowPanelUnitInfo } from './FlowHistogramTypes'\nimport { DataPosition, FlowDataDirection, UnitInfo } from './FlowHistogramConstants'\n\ntype LabelFunction = (s: string, idx: number) => string\n\nexport const getFlowHistogramPlotData = (\n  processedData: FlowPanelDataProcessed,\n  options: { flowHistogramOptions: FlowHistogramOptionsProps }): jquery.flot.dataSeries[] => {\n\n  const mode = options.flowHistogramOptions.mode.label\n\n  if (mode === 'Separate') {\n    return createSeparateFlotDataSeries(processedData, options.flowHistogramOptions.direction.label)\n  } else if (mode === 'Stacked') {\n    return processedData.stackedData?.metricsByLabel || []\n  }\n\n  return []\n}\n\nconst createSeparateFlotDataSeries = (processedData: FlowPanelDataProcessed, direction?: string): jquery.flot.dataSeries[] => {\n  const inSeriesData: jquery.flot.dataSeries = {\n    label: 'In',\n    bars: {\n      show: true,\n      barWidth: 0.2,\n      align: direction === 'Horizontal' ? 'left' : 'right'\n    },\n    data: processedData.separateData?.inByLabel || []\n  }\n\n  const outSeriesData: jquery.flot.dataSeries = {\n    label: 'Out',\n    bars: {\n      show: true,\n      barWidth: 0.2,\n      align: direction === 'Horizontal' ? 'right' : 'left'\n    },\n    data: processedData.separateData?.outByLabel || []\n  }\n\n  return [outSeriesData, inSeriesData]\n}\n\nexport const getFlowHistogramPlotConfig = (\n  processedData: FlowPanelDataProcessed,\n  options: { flowHistogramOptions: FlowHistogramOptionsProps }): jquery.flot.plotOptions => {\n\n    const stacked = options.flowHistogramOptions.mode.label === 'Stacked'\n    const horizontal = options.flowHistogramOptions.direction.label === 'Horizontal'\n    const container = null //options.flowHistogramOptions.position.label === 'Under Graph' ? $('.flow-histogram-legend-bottom') : $('.flow-histogram-legend-right') \n    const noColumns = options.flowHistogramOptions.position.label === 'Under Graph' ? 5 : 1\n    const showLegend = options.flowHistogramOptions.showLegend\n    const legendPosition = options.flowHistogramOptions.position.value\n\n    const yaxis = {\n        mode: 'categories',\n        tickLength: 0,\n        ticks: stacked ? processedData.stackedData?.ticks : processedData.separateData?.ticks,\n        autoscaleMargin: 0.02,\n    } as jquery.flot.axisOptions\n\n    const configOptions = {\n        legend: {\n            show: showLegend,\n            container: container || undefined,\n            position: legendPosition,\n            backgroundOpacity: 0,\n            noColumns: noColumns,\n            labelFormatter: (label, series) => { return '<a style=\"margin:3px\" >' + label + '</a>'; }\n        },\n        series: {\n            bars: {\n                align: \"center\",\n                barWidth: 0.6,\n                fill: 0.8,\n                horizontal: horizontal,\n                lineWidth: 1,\n                show: true,\n            },\n            stack: stacked,\n        },\n        grid: {\n            borderWidth: 0,\n        },\n        xaxis: horizontal ? {} : yaxis,\n        yaxis: horizontal ? yaxis : {}\n    } as jquery.flot.plotOptions\n\n    return configOptions\n}\n\nexport const getLabeledValues = (data: PanelData, options: { flowHistogramOptions: FlowHistogramOptionsProps }): FlowPanelDataProcessed => {\n  // There should be just one data series in this case, since this works together with the asTableSummary function\n  if (data?.series?.length !== 1) {\n    throw new Error('Only one query is permitted in this panel')\n  }\n\n  const sd: DataFrame = data.series[0]\n  const metric = sd && sd.meta && sd.meta.custom ? sd.meta.custom['metric'] : undefined\n\n  if (!metric) {\n    return {} as FlowPanelDataProcessed\n  }\n\n  const stacked = options.flowHistogramOptions.mode.label === 'Stacked'\n  const horizontal = options.flowHistogramOptions.direction.label === 'Horizontal'\n  const rate = options.flowHistogramOptions.display.label === 'Rate'\n  const toBits = sd.meta?.custom?.['toBits'] ? true : false\n  const inLabel = toBits ? 'Bits In' : 'Bytes In'\n  const outLabel = toBits ? 'Bits Out' : 'Bytes Out'\n  const inByData: any[] = getSeriesMetricValues(sd.fields, inLabel)\n  const outByData: any[] = getSeriesMetricValues(sd.fields, outLabel)\n\n  let inResult: any[] = []  // [bytes, metric]\n  let outResult: any[] = [] // [bytes, metric]\n  let stackedResult: any[] = []\n\n  const { metricLabels, labelFunction } = getMetricLabelsAndLabelFunction(metric, sd)\n  const indexedMetricLabels = getIndexedMetricLabels(metricLabels, labelFunction, stacked)\n  const timeRangeInSeconds = data.timeRange.to.diff(data.timeRange.from, 'seconds')\n  const unitInfo: FlowPanelUnitInfo = UnitInfo(options, data?.series)\n\n  // reformat the data based on whether the plot is in Separated or Stacked mode, and\n  // whether the histogram bar orientation is vertical or horizontal\n  if (!stacked) {\n    inResult = getSeparatedResultData(inByData, indexedMetricLabels, horizontal, unitInfo, rate, timeRangeInSeconds)\n    outResult = getSeparatedResultData(outByData, indexedMetricLabels, horizontal, unitInfo, rate, timeRangeInSeconds)\n  } else {\n    stackedResult = getStackedResultData(indexedMetricLabels, inByData, outByData, horizontal, unitInfo, rate, timeRangeInSeconds)\n  }\n\n  const labeledValues = {\n    separateData: {\n      inByLabel: inResult,\n      outByLabel: outResult,\n      ticks: indexedMetricLabels\n    },\n    stackedData: {\n      metricsByLabel: stackedResult,\n      ticks: [[FlowDataDirection.dataIn.value, FlowDataDirection.dataIn.label], [FlowDataDirection.dataOut.value, FlowDataDirection.dataOut.label]]\n    }\n  }\n\n  return labeledValues\n}\n\nconst getMetricLabelsAndLabelFunction = (metric: string, frame: DataFrame) => {\n  let metricLabels: any[] = []\n  let labelFunction: LabelFunction = name => name\n\n  switch (metric) {\n    case 'Applications':\n      metricLabels = getSeriesMetricValues(frame.fields, 'Application')\n      break\n    case 'Hosts':\n      metricLabels = getSeriesMetricValues(frame.fields, 'Host')\n      break\n    case 'Conversations':\n      metricLabels = getSeriesMetricValues(frame.fields, 'Application')\n      const sourceLabels = getSeriesMetricValues(frame.fields, 'Source')\n      const destLabels = getSeriesMetricValues(frame.fields, 'Dest.')\n\n      labelFunction = (name: string, idx: number) => {\n        return sourceLabels[idx] + ' <-> ' + destLabels[idx] + ' [' + (name ? name : 'Unknown') + ']'\n      }\n      break\n  }\n\n  return {\n    metricLabels,\n    labelFunction\n  }\n}\n\n/**\n * Returns and array of [index, label] \n * where index is the record position in the original data and the label to be displayed in the graph\n */\nexport const getIndexedMetricLabels = (metricLabels: any[], labelFunction: LabelFunction, stacked: boolean) => {\n    return metricLabels.map((label, idx) => [idx, labelFunction(label, idx)])\n}\n\n/**\n * Gets the final data formatted (in 'Separated' mode) to be passed into the plot function\n * based on graph direction (vertical, horizontal)\n */\nexport const getSeparatedResultData = (data: any[], indexedLabels: any[], horizontal: boolean, unitInfo: FlowPanelUnitInfo, rate: boolean, timeRangeInSeconds: number) => {\n    const divisor = rate ? unitInfo.divisor * timeRangeInSeconds : unitInfo.divisor\n\n    return indexedLabels.map((il) => {\n        const index = il[DataPosition.indexLabel.index]\n        const value = data[index] / divisor\n        return horizontal ? [value, index] : [index, value]\n    })\n}\n\n/**\n * Gets the final data formatted (in 'Stacked' mode) to be passed into the plot function\n * based on graph direction (vertical, horizontal)\n */\nexport const getStackedResultData = (indexedMetricLabels: any[], inByData: any[], outByData: any[], horizontal: boolean, unitInfo: FlowPanelUnitInfo, rate: boolean, timeRangeInSeconds: number): any[] => {\n    const divisor = rate ? unitInfo.divisor * timeRangeInSeconds : unitInfo.divisor\n\n    return indexedMetricLabels.map((imLabel) => {\n        const index = imLabel[DataPosition.indexLabel.index]\n        const label = imLabel[DataPosition.indexLabel.label]\n        const inData = inByData[index] / divisor\n        const outData = outByData[index] / divisor\n\n        return horizontal ?\n            { label: label, data: [[inData, FlowDataDirection.dataIn.value], [outData, FlowDataDirection.dataOut.value]] } :\n            { label: label, data: [[FlowDataDirection.dataIn.value, inData], [FlowDataDirection.dataOut.value, outData]] }\n    })\n}\n\nexport const getSeriesMetricValues = (fields: any[], name: string) => {\n    const match = fields.find(f => f.name === name)\n\n    return match?.values?.toArray() || []\n}\n\nexport const setLegend = (options: { flowHistogramOptions: FlowHistogramOptionsProps }) => {\n    if (options.flowHistogramOptions.showLegend) {\n        const className = options.flowHistogramOptions.position.label === 'Under Graph' ? '.flow-histogram-legend-bottom' : '.flow-histogram-legend-right'\n        const legend = $('.legend')\n\n        if (legend && legend.html()) {\n            $(className).html('')\n            $(className).append(legend.html())\n            legend.remove()\n        }\n    }\n}\n\nexport const validateFlowHistogramPanelData = (dataSeries: DataFrame[]) => {\n    if (!dataSeries || dataSeries.length < 1) {\n        console.log('No data, check the datasource is flow-datasource and function asSummaryTable are selected')\n        return false\n    }\n\n    const series = dataSeries[0]\n\n    if (!series.meta || !series.meta?.custom) {\n        console.log('Incorrect or incomplete data, check the datasource is flow-datasource and function asSummaryTable are selected')\n        return false\n    }\n\n    return true\n}\n\nexport const getStyleFor = (element: FlowHistogramElement, height: number, width: number, options: { flowHistogramOptions: FlowHistogramOptionsProps }): CSSProperties => {\n    const isUnderGraph = options.flowHistogramOptions.position.label === 'Under Graph'\n    const showLegend = options.flowHistogramOptions.showLegend\n\n    switch (element) {\n        case FlowHistogramElement.Container:\n            return {\n                display: showLegend && isUnderGraph ? 'block' : 'inline-block',\n                float: showLegend && isUnderGraph ? 'none' : 'left'\n            }\n        case FlowHistogramElement.Legend:\n            const widthOffset = options.flowHistogramOptions.direction.label === 'Horizontal' ? 0 : 25\n            const blockValue = isUnderGraph ? 'block' : 'inline-block'\n            return {\n                display: showLegend ? blockValue : 'none',\n                width: isUnderGraph ? width : (width * 0.2) - widthOffset,\n                height: isUnderGraph ? options.flowHistogramOptions.height : height,\n                float: isUnderGraph ? 'none' : 'left'\n            }\n        case FlowHistogramElement.ContainerGraph:\n            const heightOffset = (showLegend && isUnderGraph) ? options.flowHistogramOptions.height : 0\n\n            return {\n                width: !showLegend || isUnderGraph ? width : width * 0.8,\n                height: height - 25 - heightOffset\n            }\n        case FlowHistogramElement.GraphAxisLabel:\n            return {\n                height: 25,\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center'\n            }\n        case FlowHistogramElement.GraphAxisLabelUnit:\n            return {\n                marginTop: 24 \n            }\n    }\n}\n\nexport enum FlowHistogramElement {\n    Container,\n    ContainerGraph,\n    GraphAxisLabel,\n    GraphAxisLabelUnit,\n    Legend\n}\n","import { FlowHistogramOptionsProps, FlowPanelUnitInfo } from './FlowHistogramTypes'\nimport { validateFlowHistogramPanelData } from './FlowHistogramHelpers'\nimport { DataFrame } from '@grafana/data'\n\nexport const DirectionOptions = [\n    { label: 'Horizontal', value: '0' },\n    { label: 'Vertical', value: '1' }\n]\n\nexport const UnitOptions = [\n    { label: 'B', value: '0' },\n    { label: 'KB', value: '1' },\n    { label: 'MB', value: '2' },\n    { label: 'GB', value: '3' },\n]\n\nexport const DisplayOptions = [\n    { label: 'Total', value: '0' },\n    { label: 'Rate', value: '1' },\n]\n\nexport const ModeOptions = [\n    { label: 'Separate', value: '0' },\n    { label: 'Stacked', value: '1' },\n]\n\nexport const PositionOptions = [\n    { label: 'Right Side', value: '' },\n    { label: 'Under Graph', value: '' },\n]\n\nexport const UnitInfo = (options: { flowHistogramOptions: FlowHistogramOptionsProps }, dataSeries: DataFrame[]): FlowPanelUnitInfo => {\n    let divisor = 1\n    let units = 'Bytes'\n    \n    if (!validateFlowHistogramPanelData(dataSeries)) {\n        return { units, divisor }\n    }\n    \n    const toBits = dataSeries?.[0]?.meta?.custom?.['toBits'] ? true : false\n    const rate = options.flowHistogramOptions.display.label === 'Rate'\n    const option = options.flowHistogramOptions.units.label\n    \n    switch (option) {\n        case 'B':\n            units = toBits ? 'Bits' : 'Bytes'\n            break\n        case 'KB':\n            divisor = 1024\n            units = toBits ? 'Kb' : 'KB'\n            break\n        case 'MB':\n            divisor = 1024 ** 2\n            units = toBits ? 'Mb' : 'MB'\n            break\n        case 'GB':\n            divisor = 1024 ** 3\n            units = toBits ? 'Gb' : 'GB'\n            break\n    }\n\n    if (rate) {\n        units = units + '/s'\n    }\n\n    return { units, divisor }\n}\n\nexport const DataPosition = {\n    horizontal: {\n        value: 0,\n        index: 0,\n        metric: 1\n    },\n    vertical: {\n        value: 1,\n        index: 1,\n        metric: 0\n    },\n    indexLabel: {\n        index: 0,\n        label: 1\n    }\n}\n\nexport const FlowDataDirection = {\n    dataIn: { label: 'In', value: 0 },\n    dataOut: { label: 'Out', value: 1 }\n}\n","import React from 'react'\nimport { InlineField } from '@grafana/ui'\n\ninterface InlineFieldProps {\n    label: string;\n    children: React.ReactElement<any, string | React.JSXElementConstructor<any>> & React.ReactNode\n}\n\nexport const OnmsInlineField: React.FC<InlineFieldProps> = ({ children, ...props }) => {\n    return (\n        <>\n            <style>\n                {\n                    `\n                        .onms-inline-field > label{\n                            width:160px;\n                        }\n                    `\n                }\n            </style>\n            <InlineField {...props} className='onms-inline-field'>\n                {children}\n            </InlineField>\n        </>\n    )\n}\n","import React from 'react'\n\nexport interface SwitchBoxProps {\n    className?: string\n    children: React.ReactNode\n}\n\nexport const SwitchBox: React.FC<SwitchBoxProps> = ({className = undefined, children }) => {\n    return (\n        <div className={className} style={{ display: 'flex', alignItems: 'center', height: 32, width: 32 }}>\n            {children}\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { PanelOptionsEditorProps } from '@grafana/data'\nimport { Input, Select, Switch } from '@grafana/ui'\nimport { OnmsInlineField } from 'components/OnmsInlineField'\nimport { SwitchBox } from 'components/SwitchBox'\nimport { DirectionOptions, DisplayOptions, ModeOptions, PositionOptions, UnitOptions } from './FlowHistogramConstants'\nimport { FlowHistogramOptionsProps } from './FlowHistogramTypes'\n\ninterface FlowHistogramProps {\n}\n\nexport const FlowHistogramOptions: React.FC<PanelOptionsEditorProps<FlowHistogramProps>> = ({ onChange, context }) => {\n    const [options, setOptions] = useState<FlowHistogramOptionsProps>({\n        direction: context.options?.flowHistogramOptions?.direction || DirectionOptions[0],\n        units: context.options?.flowHistogramOptions?.units || UnitOptions[0],\n        display: context.options?.flowHistogramOptions?.display || DisplayOptions[0],\n        mode: context.options?.flowHistogramOptions?.mode || ModeOptions[0],\n        showLegend: context.options?.flowHistogramOptions?.showLegend || true,\n        position: context.options?.flowHistogramOptions?.position || PositionOptions[0],\n        height: context.options?.flowHistogramOptions?.height || 42\n    })\n\n    const updateOptions = (value: any, key: string) => {\n        setOptions((oldOptions) => {\n            const newOptions = { ...oldOptions }\n            newOptions[key] = value;\n            return newOptions\n        })\n    }\n    useEffect(() => {\n        onChange(options)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [options])\n\n    return (\n        <div>\n            <p style={{ marginTop: 12, marginBottom: 3 }}>General</p>\n            <OnmsInlineField label='Direction'>\n                <Select options={DirectionOptions}\n                    value={options?.direction}\n                    onChange={(e) => updateOptions(e, 'direction')}\n                />\n            </OnmsInlineField>\n            <OnmsInlineField label='Units'>\n                <Select options={UnitOptions}\n                    value={options?.units}\n                    onChange={(e) => updateOptions(e, 'units')}\n                />\n            </OnmsInlineField>\n            <OnmsInlineField label='Display'>\n                <Select options={DisplayOptions}\n                    value={options?.display}\n                    onChange={(e) => updateOptions(e, 'display')}\n                />\n            </OnmsInlineField>\n            <OnmsInlineField label='Mode'>\n                <Select options={ModeOptions}\n                    value={options?.mode}\n                    onChange={(e) => updateOptions(e, 'mode')}\n                />\n            </OnmsInlineField>\n\n            <p style={{ marginTop: 20, marginBottom: 3 }}>Legend</p>\n            <OnmsInlineField label='Show Legend'>\n                <SwitchBox>\n                    <Switch\n                        value={options?.showLegend}\n                        onChange={() => updateOptions(!options?.showLegend, 'showLegend')} />\n                </SwitchBox>\n            </OnmsInlineField>\n            <OnmsInlineField label='Position'>\n                <Select options={PositionOptions}\n                    value={options?.position}\n                    onChange={(e) => updateOptions(e, 'position')}\n                />\n            </OnmsInlineField>\n            <OnmsInlineField label='Height'>\n                <Input type='number' max={75} min={20} value={options?.height} onChange={(e) => updateOptions((Number.parseInt(e.currentTarget.value, 10) > 0 ? e.currentTarget.value : 0), 'height')} />\n            </OnmsInlineField>\n        </div>\n    )\n}\n","import { PanelPlugin } from '@grafana/data';\nimport { FlowHistogramControl } from './FlowHistogramControl'\nimport { FlowHistogramOptions } from './FlowHistogramOptions'\n\nexport const plugin = new PanelPlugin(FlowHistogramControl).setPanelOptions((builder) => {\n    builder.addCustomEditor({ id: 'flow-histogram-options', path: 'flowHistogramOptions', name: 'Flow Histogram Panel', editor: FlowHistogramOptions })\n});\n","import React, { useEffect, useRef } from 'react'\nimport { PanelProps } from '@grafana/data'\nimport { UnitInfo } from './FlowHistogramConstants'\nimport {\n    FlowHistogramElement,\n    getFlowHistogramPlotConfig,\n    getFlowHistogramPlotData,\n    getLabeledValues,\n    getStyleFor,\n    setLegend,\n    validateFlowHistogramPanelData\n} from './FlowHistogramHelpers'\nimport { FlowHistogramOptionsProps } from './FlowHistogramTypes'\n\ninterface FlowHistogramControlOptions { flowHistogramOptions: FlowHistogramOptionsProps }\ninterface Props extends PanelProps<FlowHistogramControlOptions> { }\n\nexport const FlowHistogramControl: React.FC<Props> = ({ data, height, width, options }) => {\n    const ref: any = useRef();\n\n    useEffect(() => {\n        if (validateFlowHistogramPanelData(data?.series)) {\n          const processedData = getLabeledValues(data, options)\n          const plotData = getFlowHistogramPlotData(processedData, options)\n          const plotConfig = getFlowHistogramPlotConfig(processedData, options)\n\n          $.plot(ref.current, plotData, plotConfig)\n\n          // TODO: remove this fix once flot library is updated in grafana. Use container option in plotConfig instead\n          setLegend(options)\n        }\n    }, [data, width, height, ref, options]);\n\n    return (\n        <>\n            <style>\n                {\n                    `\n                   .side-spot {\n                        margin-left: 25px;\n                        position: relative;\n                    }                                     \n                    .side-spot .side-spot-label {\n                        transform: rotate(-90deg) translateY(-50%);\n                        transform-origin: center;\n                        top: 42%;\n                        position: absolute;\n                        width: 0;\n                    }\n                    .legendColorBox {\n                        padding-right: 3px;\n                    }\n                    .legendLabel {\n                        color: rgb(204, 204, 220);\n                    }\n                    .side-spot table {\n                        height: ${options.flowHistogramOptions.height}px;\n                    }\n                    .flow-histogram-legend-right table {\n                        margin: 0 auto;\n                    }\n                `\n                }\n            </style>\n            <div>\n                <div className={options.flowHistogramOptions.direction.label === 'Horizontal' ? '' : 'side-spot'}\n                    style={getStyleFor(FlowHistogramElement.Container, height, width, options)}>\n                    <div ref={ref} style={getStyleFor(FlowHistogramElement.ContainerGraph, height, width, options)} />\n                    <div className='side-spot-label' style={getStyleFor(FlowHistogramElement.GraphAxisLabel, height, width, options)}>\n                        <p style={getStyleFor(FlowHistogramElement.GraphAxisLabelUnit, height, width, options)}>{UnitInfo(options, data?.series).units}</p>\n                    </div>\n                </div>\n                <div className={(options.flowHistogramOptions.position.label === 'Under Graph' ? 'flow-histogram-legend-bottom' : 'flow-histogram-legend-right')}\n                    style={getStyleFor(FlowHistogramElement.Legend, height, width, options)} />\n            </div>\n        </>\n    )\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__7781__","__WEBPACK_EXTERNAL_MODULE__2007__","__WEBPACK_EXTERNAL_MODULE__5959__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","getSeparatedResultData","data","indexedLabels","horizontal","unitInfo","rate","timeRangeInSeconds","divisor","map","il","index","DataPosition","indexLabel","getSeriesMetricValues","fields","name","match","find","f","values","toArray","validateFlowHistogramPanelData","dataSeries","series","length","console","log","meta","custom","getStyleFor","element","height","width","options","isUnderGraph","flowHistogramOptions","position","label","showLegend","display","float","widthOffset","direction","justifyContent","alignItems","marginTop","FlowHistogramElement","DirectionOptions","UnitOptions","DisplayOptions","ModeOptions","PositionOptions","UnitInfo","units","toBits","metric","vertical","FlowDataDirection","dataIn","dataOut","OnmsInlineField","children","props","style","InlineField","className","SwitchBox","div","FlowHistogramOptions","onChange","context","setOptions","useState","mode","updateOptions","oldOptions","newOptions","useEffect","p","marginBottom","Select","e","Switch","Input","type","max","min","Number","parseInt","currentTarget","plugin","PanelPlugin","ref","useRef","processedData","sd","Error","stacked","inLabel","outLabel","inByData","outByData","inResult","outResult","stackedResult","metricLabels","labelFunction","frame","sourceLabels","destLabels","idx","getMetricLabelsAndLabelFunction","indexedMetricLabels","getIndexedMetricLabels","timeRange","to","diff","from","imLabel","inData","outData","getStackedResultData","separateData","inByLabel","outByLabel","ticks","stackedData","metricsByLabel","getLabeledValues","plotData","inSeriesData","bars","show","barWidth","align","createSeparateFlotDataSeries","getFlowHistogramPlotData","plotConfig","noColumns","legendPosition","yaxis","tickLength","autoscaleMargin","legend","container","backgroundOpacity","labelFormatter","fill","lineWidth","stack","grid","borderWidth","xaxis","getFlowHistogramPlotConfig","$","plot","current","html","append","remove","setLegend","Container","ContainerGraph","GraphAxisLabel","GraphAxisLabelUnit","Legend","setPanelOptions","builder","addCustomEditor","id","path","editor"],"sourceRoot":""}